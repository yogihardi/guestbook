// Code generated by goagen v1.3.1, DO NOT EDIT.
//
// API "guest-book": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/yogihardi/guestbook/rest/design
// --out=$(GOPATH)/src/github.com/yogihardi/guestbook/rest
// --version=v1.3.1

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// AddGuestbookContext provides the guestbook add action context.
type AddGuestbookContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *GuestbookType
}

// NewAddGuestbookContext parses the incoming request URL and body, performs validations and creates the
// context used by the guestbook controller add action.
func NewAddGuestbookContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddGuestbookContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddGuestbookContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *AddGuestbookContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddGuestbookContext) BadRequest(r *GuestbookError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *AddGuestbookContext) InternalServerError(r *GuestbookError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// DeleteGuestbookContext provides the guestbook delete action context.
type DeleteGuestbookContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	ID string
}

// NewDeleteGuestbookContext parses the incoming request URL and body, performs validations and creates the
// context used by the guestbook controller delete action.
func NewDeleteGuestbookContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteGuestbookContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteGuestbookContext{Context: ctx, ResponseData: resp, RequestData: req}
	paramID := req.Params["id"]
	if len(paramID) > 0 {
		rawID := paramID[0]
		rctx.ID = rawID
	}
	return &rctx, err
}

// NoContent sends a HTTP response with status code 204.
func (ctx *DeleteGuestbookContext) NoContent() error {
	ctx.ResponseData.WriteHeader(204)
	return nil
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteGuestbookContext) BadRequest(r *GuestbookError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// NotFound sends a HTTP response with status code 404.
func (ctx *DeleteGuestbookContext) NotFound() error {
	ctx.ResponseData.WriteHeader(404)
	return nil
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *DeleteGuestbookContext) InternalServerError(r *GuestbookError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// ListGuestbookContext provides the guestbook list action context.
type ListGuestbookContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewListGuestbookContext parses the incoming request URL and body, performs validations and creates the
// context used by the guestbook controller list action.
func NewListGuestbookContext(ctx context.Context, r *http.Request, service *goa.Service) (*ListGuestbookContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := ListGuestbookContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *ListGuestbookContext) OK(r GuestbookGuestCollection) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.guestbook.guest+json; type=collection")
	}
	if r == nil {
		r = GuestbookGuestCollection{}
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *ListGuestbookContext) BadRequest(r *GuestbookError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// InternalServerError sends a HTTP response with status code 500.
func (ctx *ListGuestbookContext) InternalServerError(r *GuestbookError) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 500, r)
}

// VersionVersionContext provides the version version action context.
type VersionVersionContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
}

// NewVersionVersionContext parses the incoming request URL and body, performs validations and creates the
// context used by the version controller version action.
func NewVersionVersionContext(ctx context.Context, r *http.Request, service *goa.Service) (*VersionVersionContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := VersionVersionContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// OK sends a HTTP response with status code 200.
func (ctx *VersionVersionContext) OK(r *GuestbookVersion) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}
